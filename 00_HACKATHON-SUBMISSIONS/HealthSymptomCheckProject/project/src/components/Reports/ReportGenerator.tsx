import React from 'react';
import { jsPDF } from 'jspdf';
import html2canvas from 'html2canvas';
import { Download, FileText, Calendar, User } from 'lucide-react';
import type { SymptomSession, User as UserType } from '../../types/medical';

interface ReportGeneratorProps {
  session: SymptomSession;
  user: UserType;
}

export function ReportGenerator({ session, user }: ReportGeneratorProps) {
  const generatePDF = async () => {
    try {
      const pdf = new jsPDF();
      const pageWidth = pdf.internal.pageSize.getWidth();
      
      // Header
      pdf.setFontSize(20);
      pdf.text('HealthAI Symptom Assessment Report', 20, 30);
      
      // Disclaimer
      pdf.setFontSize(10);
      pdf.setTextColor(200, 0, 0);
      pdf.text('IMPORTANT: This report is for informational purposes only and is not medical advice.', 20, 45);
      pdf.text('Always consult qualified healthcare providers for medical concerns.', 20, 52);
      
      // Reset color
      pdf.setTextColor(0, 0, 0);
      
      // Patient Information
      pdf.setFontSize(14);
      pdf.text('Patient Information', 20, 70);
      pdf.setFontSize(11);
      pdf.text(`Name: ${user.full_name || 'Not provided'}`, 20, 85);
      pdf.text(`Date of Birth: ${user.date_of_birth || 'Not provided'}`, 20, 95);
      pdf.text(`Gender: ${user.gender?.replace('_', ' ') || 'Not specified'}`, 20, 105);
      
      // Assessment Details
      pdf.setFontSize(14);
      pdf.text('Assessment Details', 20, 125);
      pdf.setFontSize(11);
      pdf.text(`Chief Complaint: ${session.chief_complaint}`, 20, 140);
      pdf.text(`Assessment Date: ${new Date(session.created_at).toLocaleDateString()}`, 20, 150);
      pdf.text(`Priority Level: ${session.priority_level.replace('_', ' ').toUpperCase()}`, 20, 160);
      pdf.text(`Risk Score: ${session.risk_score}/100`, 20, 170);
      
      // AI Analysis
      if (session.ai_analysis) {
        pdf.setFontSize(14);
        pdf.text('AI Analysis', 20, 190);
        pdf.setFontSize(10);
        const analysisLines = pdf.splitTextToSize(session.ai_analysis, pageWidth - 40);
        pdf.text(analysisLines, 20, 205);
      }
      
      // Recommendations
      if (session.recommendations?.length) {
        pdf.setFontSize(14);
        pdf.text('Recommendations', 20, 240);
        pdf.setFontSize(10);
        session.recommendations.forEach((rec, index) => {
          pdf.text(`${index + 1}. ${rec}`, 25, 255 + (index * 10));
        });
      }
      
      // Footer
      pdf.setFontSize(8);
      pdf.setTextColor(128, 128, 128);
      pdf.text('Generated by HealthAI - AI-Powered Health Guidance Platform', 20, 280);
      pdf.text(`Report ID: ${session.id}`, 20, 287);
      
      // Save PDF
      pdf.save(`healthai-report-${new Date().toISOString().split('T')[0]}.pdf`);
    } catch (error) {
      console.error('PDF generation error:', error);
      alert('Failed to generate PDF report. Please try again.');
    }
  };

  return (
    <div className="bg-white rounded-lg border border-gray-200 p-6">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center space-x-3">
          <FileText className="w-6 h-6 text-blue-600" />
          <div>
            <h3 className="text-lg font-semibold text-gray-900">Assessment Report</h3>
            <p className="text-sm text-gray-600">
              Generate a comprehensive report for your healthcare provider
            </p>
          </div>
        </div>
        
        <button
          onClick={generatePDF}
          className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
        >
          <Download className="w-4 h-4" />
          <span>Download PDF</span>
        </button>
      </div>

      {/* Report Preview */}
      <div className="border border-gray-200 rounded-lg p-4 bg-gray-50">
        <div className="space-y-3 text-sm">
          <div className="flex items-center space-x-2">
            <User className="w-4 h-4 text-gray-600" />
            <span className="font-medium">Patient:</span>
            <span>{user.full_name || 'Anonymous'}</span>
          </div>
          
          <div className="flex items-center space-x-2">
            <Calendar className="w-4 h-4 text-gray-600" />
            <span className="font-medium">Assessment Date:</span>
            <span>{new Date(session.created_at).toLocaleDateString()}</span>
          </div>
          
          <div className="flex items-center space-x-2">
            <FileText className="w-4 h-4 text-gray-600" />
            <span className="font-medium">Chief Complaint:</span>
            <span>{session.chief_complaint}</span>
          </div>
          
          <div className="flex items-center space-x-2">
            <span className="font-medium">Priority:</span>
            <span className={`px-2 py-1 rounded-full text-xs font-medium ${
              session.priority_level === 'emergency' ? 'bg-red-100 text-red-800' :
              session.priority_level === 'urgent' ? 'bg-yellow-100 text-yellow-800' :
              'bg-green-100 text-green-800'
            }`}>
              {session.priority_level.replace('_', ' ').toUpperCase()}
            </span>
          </div>
        </div>
      </div>
    </div>
  );
}